h1. TEXTILE

p=. *A Humane Web Text Generator*

p=. A lightweight markup language that takes (almost) plaintext and converts it into well formed HTML.


h2. Branches

There are two main branches in the repository that will be of interest.

|_. Branch |_. Description |_. PHP Requirements |
|^=. *master* | The master branch currently represents a multi-file, namespaced, "PSR-0/1/2":https://github.com/php-fig/fig-standards/tree/master/accepted compliant version of textile. These are tagged as v3.5.x releases. |^=. 5.3+ |
|^=. *2.5* | The 2.5 branch holds a non-namespaced, single-file version of textile representing the v2.5.x releases. This branch is *not* PSR-0 compliant but it attempts to follow PSR-1 and PSR-2 in all other respects. |^=. 5.0+ |

Both branches can be installed via the composer package management system.

From time to time other branches may be present in the repository. These represent transient development or hotfix branches and should not be used for live sites/projects.


h2. Installation

The only file that is necessary for the correct operation of Textile is @classTextile.php@ from the project root directory. However, to use additional features you may need to install other files from the project tree.

For live installations only files and subdirectories from the @master@ branch should be used. _Code from other branches should not be used on live sites._

See the "composer wiki page":https://github.com/netcarver/textile/wiki/Installation-via-Composer if you use "composer":https://getcomposer.org to manage the dependencies in your projects. 


h2. Usage

You'll need to include the source file and instantiate a parser...

bc.. include "classTextile.php"; // adjust paths if needed.
$textile = new Textile();

p. Then, for input that you control, pass it to @TextileThis()@. Like so...

bc. $output = $textile->TextileThis( $trusted_input );

If you are using Textile to format user-supplied input, blog comments for instance, use a @TextileRestricted()@ call...

bc. $output = $textile->TextileRestricted( $untrusted_input );



h3. Doctypes

Currently, PHP Textile can target either XHTML or HTML5 output with XHTML being the default for backward compatibility. If you need HTML5 generation, just do...

bc.. $textile = new Textile('html5');

p. ...and you'll get @abbr@ instead of @acronym@ and if you use alignment markers on your images you'll have extra classes placed on them instead of xhtml's @align@ attribute.

h3. Setting alternate glyphs

From v2.5 on, you can no longer use the legacy 'txt_' defines to override the characters textile will use when doing typographic substitutions. If you need to setup textile to do non-standard typographic substitutions then you need to call @setSymbol('name', 'value');@ to setup the symbol table before you call @textileThis()@ or @textileRestricted()@.

If you wanted to override the symbol output for the one-half typographic substitution from the standard @&#189;@ to something using the fraction-slash you could do it like this...

bc.. $textile = new Textile('html5'); // adjust if you need a different doctype
$out = $textile
    ->setSymbol('half', '1&#8260;2')  // Redefine the half symbol to use the fraction-slash character
    ->textileThis($article)
    ;

p. The symbol names you can pass to @setSymbol()@ can be found "here":https://github.com/netcarver/textile/blob/582fb7e2af83bb043fe6dd3846220796c814f999/classTextile.php#L468.

h3. Prefixing relative image paths

From v2.5 onward you can explicitly setup a prefix that will be added to all relative image paths. This might be useful if your application only allows users to reference images from a certain location like, say, an images directory. The @setRelativeImagePrefix()@ method is now available to you for explicitly setting this if you need it.

bc.. $textile = new Textile('html5'); // target whatever doctype you need
$out = $textile
   ->setRelativeImagePrefix('prefix') // adjust 'prefix' as needed
   ->textileThis($article)            // format the article
   ;

p. Textpattern is one project that is known to use this feature.

h2. Getting In Contact

The textile project welcomes constructive input and bug reports from users. You can contact us in several ways. 

* "Open an issue":https://github.com/netcarver/textile/issues on the repository for a feature request or bug.
* If you are on IRC, feel free to drop into *#textile* on *freenode.net* ("webchat":http://webchat.freenode.net/?channels=#textile.)
* Use the generic "contact form":http://sitemonks.com/.

